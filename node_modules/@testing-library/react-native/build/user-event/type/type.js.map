{"version":3,"file":"type.js","names":["_hostComponentNames","require","_eventBuilder","_errors","_pointerEvents","_utils","_parseKeys","type","element","text","options","isHostTextInput","ErrorWithStack","props","editable","isPointerEventEnabled","keys","parseKeys","skipPress","dispatchEvent","EventBuilder","Common","touch","focus","wait","config","currentText","value","defaultValue","key","previousText","applyKey","emitTypingEvents","finalText","submitEditing","TextInput","endEditing","blur","isMultiline","multiline","keyPress","textInput","change","selectionRange","start","length","end","selectionChange","contentSize","getTextContentSize","contentSizeChange","slice"],"sources":["../../../src/user-event/type/type.ts"],"sourcesContent":["import { ReactTestInstance } from 'react-test-renderer';\nimport { isHostTextInput } from '../../helpers/host-component-names';\nimport { EventBuilder } from '../event-builder';\nimport { ErrorWithStack } from '../../helpers/errors';\nimport { isPointerEventEnabled } from '../../helpers/pointer-events';\nimport { UserEventConfig, UserEventInstance } from '../setup';\nimport { dispatchEvent, wait, getTextContentSize } from '../utils';\n\nimport { parseKeys } from './parseKeys';\n\nexport interface TypeOptions {\n  skipPress?: boolean;\n  submitEditing?: boolean;\n}\n\nexport async function type(\n  this: UserEventInstance,\n  element: ReactTestInstance,\n  text: string,\n  options?: TypeOptions\n): Promise<void> {\n  if (!isHostTextInput(element)) {\n    throw new ErrorWithStack(\n      `type() works only with host \"TextInput\" elements. Passed element has type \"${element.type}\".`,\n      type\n    );\n  }\n\n  // Skip events if the element is disabled\n  if (element.props.editable === false || !isPointerEventEnabled(element)) {\n    return;\n  }\n\n  const keys = parseKeys(text);\n\n  if (!options?.skipPress) {\n    dispatchEvent(element, 'pressIn', EventBuilder.Common.touch());\n  }\n\n  dispatchEvent(element, 'focus', EventBuilder.Common.focus());\n\n  if (!options?.skipPress) {\n    await wait(this.config);\n    dispatchEvent(element, 'pressOut', EventBuilder.Common.touch());\n  }\n\n  let currentText = element.props.value ?? element.props.defaultValue ?? '';\n  for (const key of keys) {\n    const previousText = element.props.value ?? currentText;\n    currentText = applyKey(previousText, key);\n\n    await emitTypingEvents(\n      this.config,\n      element,\n      key,\n      currentText,\n      previousText\n    );\n  }\n\n  const finalText = element.props.value ?? currentText;\n  await wait(this.config);\n\n  if (options?.submitEditing) {\n    dispatchEvent(\n      element,\n      'submitEditing',\n      EventBuilder.TextInput.submitEditing(finalText)\n    );\n  }\n\n  dispatchEvent(\n    element,\n    'endEditing',\n    EventBuilder.TextInput.endEditing(finalText)\n  );\n\n  dispatchEvent(element, 'blur', EventBuilder.Common.blur());\n}\n\nexport async function emitTypingEvents(\n  config: UserEventConfig,\n  element: ReactTestInstance,\n  key: string,\n  currentText: string,\n  previousText: string\n) {\n  const isMultiline = element.props.multiline === true;\n\n  await wait(config);\n  dispatchEvent(element, 'keyPress', EventBuilder.TextInput.keyPress(key));\n\n  // According to the docs only multiline TextInput emits textInput event\n  // @see: https://github.com/facebook/react-native/blob/42a2898617da1d7a98ef574a5b9e500681c8f738/packages/react-native/Libraries/Components/TextInput/TextInput.d.ts#L754\n  if (isMultiline) {\n    dispatchEvent(\n      element,\n      'textInput',\n      EventBuilder.TextInput.textInput(currentText, previousText)\n    );\n  }\n\n  dispatchEvent(element, 'change', EventBuilder.TextInput.change(currentText));\n  dispatchEvent(element, 'changeText', currentText);\n\n  const selectionRange = {\n    start: currentText.length,\n    end: currentText.length,\n  };\n  dispatchEvent(\n    element,\n    'selectionChange',\n    EventBuilder.TextInput.selectionChange(selectionRange)\n  );\n\n  // According to the docs only multiline TextInput emits contentSizeChange event\n  // @see: https://reactnative.dev/docs/textinput#oncontentsizechange\n  if (isMultiline) {\n    const contentSize = getTextContentSize(currentText);\n    dispatchEvent(\n      element,\n      'contentSizeChange',\n      EventBuilder.TextInput.contentSizeChange(contentSize)\n    );\n  }\n}\n\nfunction applyKey(text: string, key: string) {\n  if (key === 'Enter') {\n    return `${text}\\n`;\n  }\n\n  if (key === 'Backspace') {\n    return text.slice(0, -1);\n  }\n\n  return text + key;\n}\n"],"mappings":"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"}